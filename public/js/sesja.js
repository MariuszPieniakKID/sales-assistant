// sesja.js - ZarzƒÖdzanie sesjami sprzeda≈ºowymi
(function() {
    'use strict';
    
    // PIERWSZY TEST - czy IIFE siƒô wykonuje
    console.log('üöÄ IIFE START - sesja.js');
    
    console.log('üé¨ sesja.js - Start ≈Çadowania skryptu');

    let clients = [];
    let products = [];
    let currentSession = null;
    let recordingTimer = null;
    let recordingStartTime = null;

    // Elementy DOM
    console.log('üîç Szukanie element√≥w DOM...');
    const sessionClientSelect = document.getElementById('sessionClient');
    const sessionProductSelect = document.getElementById('sessionProduct');
    const sessionNotesTextarea = document.getElementById('sessionNotes');
    const startSessionBtn = document.getElementById('startSessionBtn');
    const sessionStatus = document.getElementById('sessionStatus');
    const recentSessionsList = document.getElementById('recentSessionsList');

    // NATYCHMIASTOWY TEST DOM
    console.log('üîç TEST IMMEDIATE DOM:', {
        sessionClientSelect: !!sessionClientSelect ? 'FOUND' : 'NOT FOUND',
        sessionProductSelect: !!sessionProductSelect ? 'FOUND' : 'NOT FOUND',
        sessionNotesTextarea: !!sessionNotesTextarea ? 'FOUND' : 'NOT FOUND',
    });

    console.log('üîç Znalezione elementy DOM:', {
        sessionClientSelect: !!sessionClientSelect,
        sessionProductSelect: !!sessionProductSelect,
        sessionNotesTextarea: !!sessionNotesTextarea,
        startSessionBtn: !!startSessionBtn,
        sessionStatus: !!sessionStatus,
        recentSessionsList: !!recentSessionsList
    });

    // Funkcja pomocnicza do fetch z automatycznym sprawdzaniem sesji
    async function fetchWithAuth(url, options = {}) {
        try {
            const response = await fetch(url, options);
            
            // Sprawd≈∫ czy odpowied≈∫ wskazuje na wygas≈ÇƒÖ sesjƒô
            if (response.status === 401) {
                console.log('‚ùå API zwr√≥ci≈Ço 401 - sesja wygas≈Ça w sesja.js');
                window.location.href = '/login';
                return null;
            }
            
            // Dodatkowe sprawdzenie - czy nie dostali≈õmy HTML przekierowania
            if (response.ok && response.url.includes('/login')) {
                console.log('‚ùå Otrzymano przekierowanie do /login przez URL w sesja.js');
                window.location.href = '/login';
                return null;
            }
            
            return response;
        } catch (error) {
            console.error('‚ùå B≈ÇƒÖd fetchWithAuth w sesja.js:', error);
            throw error;
        }
    }

    // Inicjalizacja
    function initSesjaSection() {
        console.log('üé¨ Inicjalizacja sekcji sesja...');
        loadClients();
        loadProducts();
        loadRecentSessions();
        setupEventListeners();
    }

    // Sprawd≈∫ czy DOM jest gotowy lub czekaj na DOMContentLoaded
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initSesjaSection);
    } else {
        // DOM ju≈º gotowy - wykonaj natychmiast
        initSesjaSection();
    }

    // Konfiguracja event listener√≥w
    function setupEventListeners() {
        console.log('üîß Konfiguracja event listener√≥w...');
        
        // Sprawd≈∫ czy elementy istniejƒÖ
        if (!sessionClientSelect || !sessionProductSelect || !startSessionBtn) {
            console.error('‚ùå Brak wymaganych element√≥w DOM dla event listener√≥w');
            return;
        }
        
        // Wyb√≥r klienta i produktu
        sessionClientSelect.addEventListener('change', validateSessionForm);
        sessionProductSelect.addEventListener('change', validateSessionForm);
        
        // Rozpoczƒôcie sesji
        startSessionBtn.addEventListener('click', startSession);
        
        // Kontrola sesji
        document.getElementById('pauseSessionBtn')?.addEventListener('click', pauseSession);
        document.getElementById('stopSessionBtn')?.addEventListener('click', stopSession);
        
        console.log('‚úÖ Event listenery skonfigurowane');
    }

    // ≈Åadowanie klient√≥w
    async function loadClients() {
        try {
            console.log('üì• ≈Åadowanie klient√≥w...');
            const response = await fetchWithAuth('/api/clients');
            
            if (!response) {
                // fetchWithAuth ju≈º obs≈Çu≈ºy≈Ç przekierowanie
                return;
            }
            
            if (!response.ok) {
                throw new Error('B≈ÇƒÖd pobierania klient√≥w');
            }
            
            clients = await response.json();
            console.log('‚úÖ Za≈Çadowano klient√≥w:', clients.length);
            populateClientSelect();
            
        } catch (error) {
            console.error('‚ùå B≈ÇƒÖd ≈Çadowania klient√≥w:', error);
            showToast('B≈ÇƒÖd ≈Çadowania klient√≥w', 'error');
        }
    }

    // ≈Åadowanie produkt√≥w
    async function loadProducts() {
        try {
            console.log('üì• ≈Åadowanie produkt√≥w...');
            const response = await fetchWithAuth('/api/products');
            
            if (!response) {
                // fetchWithAuth ju≈º obs≈Çu≈ºy≈Ç przekierowanie
                return;
            }
            
            if (!response.ok) {
                throw new Error('B≈ÇƒÖd pobierania produkt√≥w');
            }
            
            products = await response.json();
            console.log('‚úÖ Za≈Çadowano produkt√≥w:', products.length);
            populateProductSelect();
            
        } catch (error) {
            console.error('‚ùå B≈ÇƒÖd ≈Çadowania produkt√≥w:', error);
            showToast('B≈ÇƒÖd ≈Çadowania produkt√≥w', 'error');
        }
    }

    // Wype≈Çnienie listy klient√≥w
    function populateClientSelect() {
        console.log('üè¢ populateClientSelect - start, klienci:', clients.length);
        console.log('üîç Element sessionClientSelect:', !!sessionClientSelect);
        
        if (!sessionClientSelect) {
            console.error('‚ùå Element sessionClientSelect nie istnieje!');
            return;
        }
        
        sessionClientSelect.innerHTML = '<option value="">-- Wybierz klienta --</option>';
        
        clients.forEach((client, index) => {
            console.log(`üë§ Dodajƒô klienta ${index + 1}:`, client.name, `(ID: ${client.id})`);
            const option = document.createElement('option');
            option.value = client.id;
            option.textContent = client.name;
            sessionClientSelect.appendChild(option);
        });
        
        console.log('‚úÖ populateClientSelect - zako≈Ñczone, opcje:', sessionClientSelect.children.length);
    }

    // Wype≈Çnienie listy produkt√≥w
    function populateProductSelect() {
        console.log('üì¶ populateProductSelect - start, produkty:', products.length);
        console.log('üîç Element sessionProductSelect:', !!sessionProductSelect);
        
        if (!sessionProductSelect) {
            console.error('‚ùå Element sessionProductSelect nie istnieje!');
            return;
        }
        
        sessionProductSelect.innerHTML = '<option value="">-- Wybierz produkt --</option>';
        
        products.forEach((product, index) => {
            console.log(`üì¶ Dodajƒô produkt ${index + 1}:`, product.name, `(ID: ${product.id})`);
            const option = document.createElement('option');
            option.value = product.id;
            option.textContent = product.name;
            sessionProductSelect.appendChild(option);
        });
        
        console.log('‚úÖ populateProductSelect - zako≈Ñczone, opcje:', sessionProductSelect.children.length);
    }

    // Walidacja formularza sesji
    function validateSessionForm() {
        const clientSelected = sessionClientSelect.value !== '';
        const productSelected = sessionProductSelect.value !== '';
        
        startSessionBtn.disabled = !(clientSelected && productSelected);
    }

    // Rozpoczƒôcie sesji
    async function startSession() {
        const clientId = sessionClientSelect.value;
        const productId = sessionProductSelect.value;
        const notes = sessionNotesTextarea.value;
        
        if (!clientId || !productId) {
            showToast('Proszƒô wybierz klienta i produkt', 'error');
            return;
        }
        
        try {
            // Sprawd≈∫ czy przeglƒÖdarka obs≈Çuguje nagrywanie
            if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
                showToast('Twoja przeglƒÖdarka nie obs≈Çuguje nagrywania audio', 'error');
                return;
            }
            
            // Popro≈õ o dostƒôp do mikrofonu
            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
            
            // Utw√≥rz sesjƒô
            currentSession = {
                clientId: clientId,
                productId: productId,
                notes: notes,
                stream: stream,
                startTime: new Date()
            };
            
            // Poka≈º interfejs nagrywania
            showRecordingInterface();
            
            // Rozpocznij timer
            startRecordingTimer();
            
            showToast('Sesja rozpoczƒôta - nagrywanie w toku', 'success');
            
        } catch (error) {
            console.error('B≈ÇƒÖd rozpoczynania sesji:', error);
            if (error.name === 'NotAllowedError') {
                showToast('Dostƒôp do mikrofonu zosta≈Ç odrzucony', 'error');
            } else {
                showToast('B≈ÇƒÖd rozpoczynania sesji: ' + error.message, 'error');
            }
        }
    }

    // Pokazanie interfejsu nagrywania
    function showRecordingInterface() {
        // Ukryj formularz konfiguracji
        document.querySelector('.setup-card').style.display = 'none';
        
        // Poka≈º status sesji
        sessionStatus.style.display = 'block';
        
        // Wype≈Çnij informacje o sesji
        const selectedClient = clients.find(c => c.id == currentSession.clientId);
        const selectedProduct = products.find(p => p.id == currentSession.productId);
        
        document.getElementById('currentClientName').textContent = selectedClient ? selectedClient.name : '-';
        document.getElementById('currentProductName').textContent = selectedProduct ? selectedProduct.name : '-';
    }

    // Rozpoczƒôcie timera nagrywania
    function startRecordingTimer() {
        recordingStartTime = Date.now();
        recordingTimer = setInterval(updateRecordingTime, 1000);
    }

    // Aktualizacja czasu nagrywania
    function updateRecordingTime() {
        if (!recordingStartTime) return;
        
        const elapsed = Date.now() - recordingStartTime;
        const hours = Math.floor(elapsed / 3600000);
        const minutes = Math.floor((elapsed % 3600000) / 60000);
        const seconds = Math.floor((elapsed % 60000) / 1000);
        
        const timeString = 
            String(hours).padStart(2, '0') + ':' +
            String(minutes).padStart(2, '0') + ':' +
            String(seconds).padStart(2, '0');
        
        document.getElementById('recordingTime').textContent = timeString;
    }

    // Wstrzymanie sesji
    function pauseSession() {
        if (recordingTimer) {
            clearInterval(recordingTimer);
            recordingTimer = null;
        }
        
        const pauseBtn = document.getElementById('pauseSessionBtn');
        pauseBtn.innerHTML = '<i class="fas fa-play"></i> Wzn√≥w';
        pauseBtn.onclick = resumeSession;
        
        showToast('Sesja wstrzymana', 'info');
    }

    // Wznowienie sesji
    function resumeSession() {
        startRecordingTimer();
        
        const pauseBtn = document.getElementById('pauseSessionBtn');
        pauseBtn.innerHTML = '<i class="fas fa-pause"></i> Wstrzymaj';
        pauseBtn.onclick = pauseSession;
        
        showToast('Sesja wznowiona', 'info');
    }

    // Zako≈Ñczenie sesji
    async function stopSession() {
        if (!currentSession) return;
        
        try {
            // Zatrzymaj timer
            if (recordingTimer) {
                clearInterval(recordingTimer);
                recordingTimer = null;
            }
            
            // Zatrzymaj strumie≈Ñ audio
            if (currentSession.stream) {
                currentSession.stream.getTracks().forEach(track => track.stop());
            }
            
            // Zapisz sesjƒô (symulacja - w rzeczywisto≈õci wys≈Ça≈Çby≈õ nagranie do serwera)
            const sessionData = {
                clientId: currentSession.clientId,
                productId: currentSession.productId,
                notes: currentSession.notes,
                duration: Date.now() - recordingStartTime,
                endTime: new Date()
            };
            
            console.log('Sesja zako≈Ñczona:', sessionData);
            
            // Reset interfejsu
            resetSessionInterface();
            
            // Od≈õwie≈º ostatnie sesje
            loadRecentSessions();
            
            showToast('Sesja zako≈Ñczona i zapisana', 'success');
            
        } catch (error) {
            console.error('B≈ÇƒÖd ko≈Ñczenia sesji:', error);
            showToast('B≈ÇƒÖd ko≈Ñczenia sesji', 'error');
        }
    }

    // Reset interfejsu sesji
    function resetSessionInterface() {
        // Poka≈º formularz konfiguracji
        document.querySelector('.setup-card').style.display = 'block';
        
        // Ukryj status sesji
        sessionStatus.style.display = 'none';
        
        // Wyczy≈õƒá formularz
        sessionClientSelect.value = '';
        sessionProductSelect.value = '';
        sessionNotesTextarea.value = '';
        
        // Reset zmiennych
        currentSession = null;
        recordingStartTime = null;
        
        // Waliduj formularz
        validateSessionForm();
    }

    // ≈Åadowanie ostatnich sesji
    async function loadRecentSessions() {
        try {
            const response = await fetch('/api/sales');
            
            if (!response.ok) {
                throw new Error('B≈ÇƒÖd pobierania sesji');
            }
            
            const sessions = await response.json();
            displayRecentSessions(sessions.slice(0, 5)); // Ostatnie 5 sesji
            
        } catch (error) {
            console.error('B≈ÇƒÖd ≈Çadowania sesji:', error);
        }
    }

    // Wy≈õwietlenie ostatnich sesji
    function displayRecentSessions(sessions) {
        if (sessions.length === 0) {
            recentSessionsList.innerHTML = `
                <div class="no-sessions">
                    <i class="fas fa-microphone-slash"></i>
                    <p>Brak ostatnich sesji</p>
                </div>
            `;
            return;
        }
        
        recentSessionsList.innerHTML = sessions.map(session => `
            <div class="session-item">
                <div class="session-details">
                    <div class="session-title">${session.client_name} - ${session.product_name}</div>
                    <div class="session-meta">${new Date(session.meeting_datetime).toLocaleString('pl-PL')}</div>
                </div>
                <div class="session-duration">
                    <i class="fas fa-clock"></i>
                    ${formatDuration(session.created_at)}
                </div>
            </div>
        `).join('');
    }

    // Formatowanie czasu trwania
    function formatDuration(timestamp) {
        // Placeholder - w rzeczywisto≈õci oblicza≈Çby≈õ rzeczywisty czas trwania
        return '15:30';
    }

    // Funkcja toast (fallback je≈õli nie istnieje globalnie)
    function showToast(message, type = 'info') {
        if (typeof window.showToast === 'function') {
            window.showToast(message, type);
            return;
        }
        
        // Fallback
        if (type === 'error') {
            alert('B≈ÇƒÖd: ' + message);
        } else {
            alert(message);
        }
    }

    // Funkcja testowa - sprawd≈∫ czy skrypt siƒô za≈Çadowa≈Ç
    window.testSesjaScript = function() {
        console.log('‚úÖ sesja.js ZA≈ÅADOWANY!');
        console.log('üîç Elementy DOM:', {
            sessionClientSelect: !!sessionClientSelect,
            sessionProductSelect: !!sessionProductSelect
        });
        
        // Przetestuj ≈Çadowanie danych rƒôcznie
        console.log('üß™ Testuje ≈Çadowanie klient√≥w...');
        loadClients();
        
        console.log('üß™ Testuje ≈Çadowanie produkt√≥w...');
        loadProducts();
    };
})(); 