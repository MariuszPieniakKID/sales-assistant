// admin.js - Nowy panel administratora

console.log('üöÄ Admin panel ≈Çadowany...');

let currentEditUserId = null;

// Funkcja inicjalizacji wywo≈Çywana po za≈Çadowaniu sekcji
function initAdminPanel() {
    console.log('üìã Admin panel inicjalizowany...');
    
    // Za≈Çaduj dane dla wszystkich zak≈Çadek
    loadUsers();
    loadProducts();
    loadClients();
    loadMeetings();
    
    // Ustaw handler dla formularza u≈ºytkownika
    const userForm = document.getElementById('user-form');
    if (userForm) {
        userForm.addEventListener('submit', handleUserSubmit);
    }
}

// Wywo≈Çaj inicjalizacjƒô od razu (sekcja ju≈º jest za≈Çadowana)
setTimeout(initAdminPanel, 100);

// Funkcje prze≈ÇƒÖczania zak≈Çadek
function showTab(tabName) {
    console.log('üîÑ Prze≈ÇƒÖczanie na zak≈Çadkƒô:', tabName);
    
    // Ukryj wszystkie zak≈Çadki
    document.querySelectorAll('.tab-content').forEach(tab => {
        tab.classList.remove('active');
    });
    
    // Usu≈Ñ active z przycisk√≥w
    document.querySelectorAll('.tab-button').forEach(btn => {
        btn.classList.remove('active');
    });
    
    // Poka≈º wybranƒÖ zak≈Çadkƒô
    const targetTab = document.getElementById(tabName + '-tab');
    if (targetTab) {
        targetTab.classList.add('active');
    }
    
    // Aktywuj przycisk
    event.target.classList.add('active');
}

// === U≈ªYTKOWNICY ===

function loadUsers() {
    console.log('üë• ≈Åadowanie u≈ºytkownik√≥w...');
    
    // Sprawd≈∫ czy element istnieje
    const tbody = document.getElementById('users-tbody');
    console.log('üîß Element users-tbody:', tbody);
    
    if (!tbody) {
        console.error('‚ùå Element users-tbody nie znaleziony!');
        setTimeout(loadUsers, 500); // Spr√≥buj ponownie za 500ms
        return;
    }
    
    fetch('/api/admin/users')
        .then(response => {
            console.log('üì° Response users:', response.status);
            if (!response.ok) {
                throw new Error('B≈ÇƒÖd pobierania u≈ºytkownik√≥w');
            }
            return response.json();
        })
        .then(users => {
            console.log('‚úÖ Pobrano u≈ºytkownik√≥w:', users.length);
            displayUsers(users);
        })
        .catch(error => {
            console.error('‚ùå B≈ÇƒÖd ≈Çadowania u≈ºytkownik√≥w:', error);
            if (tbody) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="7" style="text-align: center; padding: 20px; color: red;">
                            B≈ÇƒÖd ≈Çadowania u≈ºytkownik√≥w: ${error.message}
                        </td>
                    </tr>
                `;
            }
        });
}

function displayUsers(users) {
    console.log('üîß displayUsers wywo≈Çane z', users.length, 'u≈ºytkownikami');
    const tbody = document.getElementById('users-tbody');
    
    if (!tbody) {
        console.error('‚ùå Element users-tbody nie znaleziony w displayUsers!');
        return;
    }
    
    if (users.length === 0) {
        tbody.innerHTML = `
            <tr>
                <td colspan="7" style="text-align: center; padding: 20px;">
                    Brak u≈ºytkownik√≥w w systemie
                </td>
            </tr>
        `;
        return;
    }
    
    console.log('üîß Tworzenie HTML dla u≈ºytkownik√≥w...');
    tbody.innerHTML = users.map(user => `
        <tr>
            <td>${user.id}</td>
            <td>${user.first_name}</td>
            <td>${user.last_name}</td>
            <td>${user.email}</td>
            <td>${user.phone || '-'}</td>
            <td>${new Date(user.created_at).toLocaleDateString('pl-PL')}</td>
            <td>
                <button class="btn btn-edit" onclick="editUser(${user.id})">
                    <i class="fas fa-edit"></i> Edytuj
                </button>
                <button class="btn btn-danger" onclick="deleteUser(${user.id}, '${user.first_name} ${user.last_name}')">
                    <i class="fas fa-trash"></i> Usu≈Ñ
                </button>
            </td>
        </tr>
    `).join('');
    
    console.log('‚úÖ U≈ºytkownicy wy≈õwietleni w tabeli');
}

function showAddUserModal() {
    currentEditUserId = null;
    document.getElementById('user-modal-title').textContent = 'Dodaj u≈ºytkownika';
    document.getElementById('password-help').style.display = 'none';
    document.getElementById('user-password').required = true;
    document.getElementById('user-form').reset();
    document.getElementById('user-modal').style.display = 'block';
}

function editUser(userId) {
    console.log('‚úèÔ∏è Edycja u≈ºytkownika:', userId);
    
    fetch('/api/admin/users')
        .then(response => response.json())
        .then(users => {
            const user = users.find(u => u.id === userId);
            if (!user) return;
            
            currentEditUserId = userId;
            document.getElementById('user-modal-title').textContent = 'Edytuj u≈ºytkownika';
            document.getElementById('password-help').style.display = 'block';
            document.getElementById('user-password').required = false;
            
            document.getElementById('user-firstname').value = user.first_name;
            document.getElementById('user-lastname').value = user.last_name;
            document.getElementById('user-email').value = user.email;
            document.getElementById('user-phone').value = user.phone || '';
            document.getElementById('user-password').value = '';
            
            document.getElementById('user-modal').style.display = 'block';
        })
        .catch(error => {
            console.error('B≈ÇƒÖd pobierania danych u≈ºytkownika:', error);
            alert('B≈ÇƒÖd pobierania danych u≈ºytkownika');
        });
}

function deleteUser(userId, userName) {
    if (!confirm(`Czy na pewno chcesz usunƒÖƒá u≈ºytkownika ${userName}?`)) {
        return;
    }
    
    console.log('üóëÔ∏è Usuwanie u≈ºytkownika:', userId);
    
    fetch(`/api/admin/users/${userId}`, {
        method: 'DELETE'
    })
    .then(response => response.json())
    .then(result => {
        if (result.success) {
            alert('U≈ºytkownik zosta≈Ç usuniƒôty');
            loadUsers();
        } else {
            throw new Error(result.message);
        }
    })
    .catch(error => {
        console.error('B≈ÇƒÖd usuwania u≈ºytkownika:', error);
        alert('B≈ÇƒÖd usuwania u≈ºytkownika: ' + error.message);
    });
}

function closeUserModal() {
    document.getElementById('user-modal').style.display = 'none';
    currentEditUserId = null;
}

function handleUserSubmit(e) {
    e.preventDefault();
    
    const formData = {
        firstName: document.getElementById('user-firstname').value,
        lastName: document.getElementById('user-lastname').value,
        email: document.getElementById('user-email').value,
        phone: document.getElementById('user-phone').value,
        password: document.getElementById('user-password').value
    };
    
    console.log('üíæ Zapisywanie u≈ºytkownika:', currentEditUserId ? 'edycja' : 'nowy');
    
    const url = currentEditUserId ? `/api/admin/users/${currentEditUserId}` : '/api/admin/users';
    const method = currentEditUserId ? 'PUT' : 'POST';
    
    fetch(url, {
        method: method,
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(formData)
    })
    .then(response => response.json())
    .then(result => {
        if (result.success) {
            alert(currentEditUserId ? 'U≈ºytkownik zaktualizowany' : 'U≈ºytkownik dodany');
            closeUserModal();
            loadUsers();
        } else {
            throw new Error(result.message);
        }
    })
    .catch(error => {
        console.error('B≈ÇƒÖd zapisywania u≈ºytkownika:', error);
        alert('B≈ÇƒÖd zapisywania u≈ºytkownika: ' + error.message);
    });
}

// === PRODUKTY ===

function loadProducts() {
    console.log('üì¶ ≈Åadowanie produkt√≥w...');
    
    fetch('/api/admin/all-products')
        .then(response => {
            console.log('üì° Response products:', response.status);
            if (!response.ok) {
                throw new Error('B≈ÇƒÖd pobierania produkt√≥w');
            }
            return response.json();
        })
        .then(products => {
            console.log('‚úÖ Pobrano produkty:', products.length);
            displayProducts(products);
        })
        .catch(error => {
            console.error('‚ùå B≈ÇƒÖd ≈Çadowania produkt√≥w:', error);
            document.getElementById('products-tbody').innerHTML = `
                <tr>
                    <td colspan="5" style="text-align: center; padding: 20px; color: red;">
                        B≈ÇƒÖd ≈Çadowania produkt√≥w: ${error.message}
                    </td>
                </tr>
            `;
        });
}

function displayProducts(products) {
    const tbody = document.getElementById('products-tbody');
    
    if (products.length === 0) {
        tbody.innerHTML = `
            <tr>
                <td colspan="5" style="text-align: center; padding: 20px;">
                    Brak produkt√≥w w systemie
                </td>
            </tr>
        `;
        return;
    }
    
    tbody.innerHTML = products.map(product => `
        <tr>
            <td>${product.id}</td>
            <td>${product.name}</td>
            <td>${product.owner_name || 'Brak danych'}</td>
            <td>${product.description || '-'}</td>
            <td>${new Date(product.created_at).toLocaleDateString('pl-PL')}</td>
        </tr>
    `).join('');
}

// === KLIENCI ===

function loadClients() {
    console.log('üè¢ ≈Åadowanie klient√≥w...');
    
    fetch('/api/admin/all-clients')
        .then(response => {
            console.log('üì° Response clients:', response.status);
            if (!response.ok) {
                throw new Error('B≈ÇƒÖd pobierania klient√≥w');
            }
            return response.json();
        })
        .then(clients => {
            console.log('‚úÖ Pobrano klient√≥w:', clients.length);
            displayClients(clients);
        })
        .catch(error => {
            console.error('‚ùå B≈ÇƒÖd ≈Çadowania klient√≥w:', error);
            document.getElementById('clients-tbody').innerHTML = `
                <tr>
                    <td colspan="5" style="text-align: center; padding: 20px; color: red;">
                        B≈ÇƒÖd ≈Çadowania klient√≥w: ${error.message}
                    </td>
                </tr>
            `;
        });
}

function displayClients(clients) {
    const tbody = document.getElementById('clients-tbody');
    
    if (clients.length === 0) {
        tbody.innerHTML = `
            <tr>
                <td colspan="5" style="text-align: center; padding: 20px;">
                    Brak klient√≥w w systemie
                </td>
            </tr>
        `;
        return;
    }
    
    tbody.innerHTML = clients.map(client => `
        <tr>
            <td>${client.id}</td>
            <td>${client.name}</td>
            <td>${client.description || '-'}</td>
            <td>${client.ai_notes || '-'}</td>
            <td>${client.comment || '-'}</td>
        </tr>
    `).join('');
}

// === SPOTKANIA ===

function loadMeetings() {
    console.log('üìÖ ≈Åadowanie spotka≈Ñ...');
    
    fetch('/api/admin/all-meetings')
        .then(response => {
            console.log('üì° Response meetings:', response.status);
            if (!response.ok) {
                throw new Error('B≈ÇƒÖd pobierania spotka≈Ñ');
            }
            return response.json();
        })
        .then(meetings => {
            console.log('‚úÖ Pobrano spotkania:', meetings.length);
            displayMeetings(meetings);
        })
        .catch(error => {
            console.error('‚ùå B≈ÇƒÖd ≈Çadowania spotka≈Ñ:', error);
            document.getElementById('meetings-tbody').innerHTML = `
                <tr>
                    <td colspan="6" style="text-align: center; padding: 20px; color: red;">
                        B≈ÇƒÖd ≈Çadowania spotka≈Ñ: ${error.message}
                    </td>
                </tr>
            `;
        });
}

function displayMeetings(meetings) {
    const tbody = document.getElementById('meetings-tbody');
    
    if (meetings.length === 0) {
        tbody.innerHTML = `
            <tr>
                <td colspan="6" style="text-align: center; padding: 20px;">
                    Brak spotka≈Ñ w systemie
                </td>
            </tr>
        `;
        return;
    }
    
    tbody.innerHTML = meetings.map(meeting => `
        <tr>
            <td>${meeting.id}</td>
            <td>${meeting.client_name}</td>
            <td>${meeting.product_name}</td>
            <td>${meeting.owner_name || 'Brak danych'}</td>
            <td>${new Date(meeting.meeting_datetime).toLocaleDateString('pl-PL')}</td>
            <td>
                <button class="btn btn-primary" onclick="viewMeeting(${meeting.id})">
                    <i class="fas fa-eye"></i> Zobacz
                </button>
            </td>
        </tr>
    `).join('');
}

function viewMeeting(meetingId) {
    console.log('üëÅÔ∏è PodglƒÖd spotkania:', meetingId);
    
    fetch('/api/admin/all-meetings')
        .then(response => response.json())
        .then(meetings => {
            const meeting = meetings.find(m => m.id === meetingId);
            if (!meeting) return;
            
            alert(`Szczeg√≥≈Çy spotkania ${meetingId}:\n\nKlient: ${meeting.client_name}\nProdukt: ${meeting.product_name}\nW≈Ça≈õciciel: ${meeting.owner_name}\nData: ${new Date(meeting.meeting_datetime).toLocaleString('pl-PL')}\n\nTranskrypcja: ${meeting.transcription || 'Brak'}\nNotatki: ${meeting.own_notes || 'Brak'}`);
        })
        .catch(error => {
            console.error('B≈ÇƒÖd pobierania szczeg√≥≈Ç√≥w spotkania:', error);
            alert('B≈ÇƒÖd pobierania szczeg√≥≈Ç√≥w spotkania');
        });
}

// Obs≈Çuga klikniƒôcia poza modalem
window.onclick = function(event) {
    const modal = document.getElementById('user-modal');
    if (event.target === modal) {
        closeUserModal();
    }
}

// Eksportuj funkcje do globalnego zakresu dla onclick
window.showTab = showTab;
window.editUser = editUser;
window.deleteUser = deleteUser;
window.showAddUserModal = showAddUserModal;
window.closeUserModal = closeUserModal;
window.viewMeeting = viewMeeting;

console.log('‚úÖ Admin panel gotowy!'); 